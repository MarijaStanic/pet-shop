package stanic.marija.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import stanic.marija.model.Customer;
import stanic.marija.service.CustomerService;

@Controller
public class CustomerController {

	@Autowired
	CustomerService customerService;

	@RequestMapping(value = "/customer", method = RequestMethod.GET)
	public ResponseEntity<List<Customer>> getSalesUnits() {
		List<Customer> customers = customerService.getCustomers();
		if (customers.isEmpty()) {
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<List<Customer>>(customers, HttpStatus.OK);
	}

	@RequestMapping(value = "/customer", method = RequestMethod.POST)
	public ResponseEntity<Void> createSalesUnit(@RequestBody Customer customer) {
		customerService.saveCustomer(customer);
		return new ResponseEntity<Void>(HttpStatus.CREATED);
	}

	@RequestMapping(value = "/customer{id}", method = RequestMethod.PUT)
	public ResponseEntity<Customer> updateSalesUnit(@PathVariable("id") int id, @RequestBody Customer customer) {
		Customer updatedCustomer = customerService.updateCustomer(customer);
		return new ResponseEntity<Customer>(updatedCustomer, HttpStatus.OK);
	}

	@RequestMapping(value = "/customer{id}", method = RequestMethod.DELETE)
	public ResponseEntity<Customer> deleteSalesUnit(@PathVariable("id") int id) {

		Customer customer = customerService.findById(id);
		if (customer == null) {
			System.out.println("Unable to delete. Customer with id " + id + " not found");
			return new ResponseEntity<Customer>(HttpStatus.NOT_FOUND);
		}

		customerService.deleteCustomerById(id);
		return new ResponseEntity<Customer>(HttpStatus.NO_CONTENT);
	}
}
