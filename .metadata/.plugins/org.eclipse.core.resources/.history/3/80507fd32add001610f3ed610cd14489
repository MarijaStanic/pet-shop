package stanic.marija.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
	
	@Autowired
	private UserDetailsServiceImpl userDetailsService;
	
	@Autowired
	public void configAuthBuilder(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());;
	}
	
	 /*@Override
	 public void configure(WebSecurity web) {
	  web.ignoring().antMatchers("/authenticate", "/js/*","/css/*","/index.html","/login.html","/fonts/*","/images/*","/registerForm.html", "/includes/*");
	 }*/
	 
	 @Override
	 protected void configure(HttpSecurity http) throws Exception {
		http.csrf().disable()
			.headers().disable()
		 .authorizeRequests()
		 	.antMatchers("/users").access("hasRole('ROLE_ADMIN')")
		 	.antMatchers("/sales-units").access("hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')")
		 	.antMatchers("/home").access("hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')")
		 	.antMatchers("/products").access("hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')")
		 	.antMatchers("/suppliers").access("hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')")
		 	.antMatchers("/orders").access("hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')")
		 	.antMatchers("/stocks").access("hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')")
		 	.and().exceptionHandling().accessDeniedPage("/home")
		 	.and()
		 .formLogin()
		 	.loginPage("/login")
			.usernameParameter("username")
			.passwordParameter("password")l
		
	 }
	 
	 @Bean
		public PasswordEncoder passwordEncoder() {
			PasswordEncoder encoder = new BCryptPasswordEncoder();
			return encoder;
		}
 
}
